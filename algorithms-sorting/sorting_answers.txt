Using Ruby's benchmark module,
measure the time it takes for all of the sorting algorithms
discussed in this checkpoint to sort a collection of fifty items.
Use your output to create a bar chart.

  ```
  2.4.0 :001 > load './algorithms-sorting/sorting_chart_benchmark.rb'
  "array: [38, 15, 16, 25, 19, 21, 26, 27, 47, 36, 18, 39, 37, 4, 6, 2, 41, 20, 31, 24, 30, 34, 13, 35, 29, 23, 3, 10, 43, 49, 5, 46, 33, 40, 45, 32, 44, 22, 1, 14, 42, 8, 28, 48, 17, 12, 11, 50, 9, 7]"
                user     system      total        real
  bubble_sort  0.000000   0.000000   0.000000 (  0.000550)
  bucket_sort  0.000000   0.000000   0.000000 (  0.000183)
  heap_sort  0.000000   0.000000   0.000000 (  0.000408)
  insertion_sort  0.000000   0.000000   0.000000 (  0.000240)
  merge_sort  0.000000   0.000000   0.000000 (  0.000336)
  quick_sort  0.000000   0.000000   0.000000 (  0.000249)
  selection_sort  0.000000   0.000000   0.000000 (  0.000333)
  ```

Looking at the bar chart, speculate on why you think some sort algorithms
are faster than others and provide rationale as to your thought process.

  Let me rank these from fastest to slowest:
  1. bucket_sort (183)
  2. insertion_sort (240)
  3. quick_sort (249)
  4. selection_sort (333)
  5. merge_sort (336)
  6. heap_sort (408)
  7. bubble_sort (550)

  Bucket_sort dividing values into buckets then sorting the buckets was the fastest
  organizing these 50 values.
  Quick_sort placed 3rd fastest confirming from the checkpoint that
  "Quick sort has good performance compared to other sorting algorithms."
